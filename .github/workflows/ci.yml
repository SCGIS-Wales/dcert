name: CI/CD Pipeline

permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [ stable ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Cargo fmt (check)
        run: cargo fmt --all -- --check

      - name: Cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Cargo test
        run: cargo test --all-features --verbose

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-audit-

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit

  build-linux:
    name: Build Linux binaries
    runs-on: ubuntu-latest
    needs: [ test ]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            sudo apt-get install -y musl-tools
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build (release)
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        run: |
          mkdir -p dist
          BIN_NAME="dcert"
          tar czf dist/${BIN_NAME}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${BIN_NAME}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcert-${{ matrix.target }}
          path: dist/dcert-${{ matrix.target }}.tar.gz
          retention-days: 7

  build-macos:
    name: Build macOS binaries
    runs-on: macos-latest
    needs: [ test ]
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install OpenSSL
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build (release)
        run: |
          export OPENSSL_DIR=$(brew --prefix openssl@3)
          export OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib
          export OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include
          cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        run: |
          mkdir -p dist
          BIN_NAME="dcert"
          tar czf dist/${BIN_NAME}-${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release ${BIN_NAME}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcert-${{ matrix.target }}
          path: dist/dcert-${{ matrix.target }}.tar.gz
          retention-days: 7

  build-windows:
    name: Build Windows binaries
    runs-on: windows-latest
    needs: [ test ]
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build (release)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        run: |
          mkdir -p dist
          $BIN_NAME = "dcert.exe"
          Compress-Archive -Path "target/${{ matrix.target }}/release/$BIN_NAME" -DestinationPath "dist/dcert-${{ matrix.target }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcert-${{ matrix.target }}
          path: dist/dcert-${{ matrix.target }}.zip
          retention-days: 7

  create-homebrew-formula:
    name: Create Homebrew Formula
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ build-linux, build-macos ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: dcert-x86_64-unknown-linux-gnu
          path: ./artifacts

      - name: Download macOS x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: dcert-x86_64-apple-darwin
          path: ./artifacts

      - name: Download macOS ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: dcert-aarch64-apple-darwin
          path: ./artifacts

      - name: Generate Homebrew Formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Calculate SHA256 checksums
          LINUX_SHA256=$(sha256sum artifacts/dcert-x86_64-unknown-linux-gnu.tar.gz | cut -d' ' -f1)
          MACOS_X86_SHA256=$(sha256sum artifacts/dcert-x86_64-apple-darwin.tar.gz | cut -d' ' -f1)
          MACOS_ARM_SHA256=$(sha256sum artifacts/dcert-aarch64-apple-darwin.tar.gz | cut -d' ' -f1)
          
          # Create Homebrew formula
          cat > dcert.rb << EOF
          class Dcert < Formula
            desc "TLS Certificate Decoder & Validator"
            homepage "$REPO_URL"
            version "$VERSION"
            license "MIT"
          
            if OS.mac?
              if Hardware::CPU.arm?
                url "$REPO_URL/releases/download/v$VERSION/dcert-aarch64-apple-darwin.tar.gz"
                sha256 "$MACOS_ARM_SHA256"
              else
                url "$REPO_URL/releases/download/v$VERSION/dcert-x86_64-apple-darwin.tar.gz"
                sha256 "$MACOS_X86_SHA256"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "$REPO_URL/releases/download/v$VERSION/dcert-aarch64-unknown-linux-gnu.tar.gz"
                sha256 "# ARM64 Linux checksum placeholder"
              else
                url "$REPO_URL/releases/download/v$VERSION/dcert-x86_64-unknown-linux-gnu.tar.gz"
                sha256 "$LINUX_SHA256"
              end
            end
          
            def install
              bin.install "dcert"
            end
          
            test do
              assert_match "dcert", shell_output("#{bin}/dcert --version")
            end
          end
          EOF

      - name: Upload Homebrew Formula
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: dcert.rb
          retention-days: 30

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [ test, security-audit, build-linux, build-macos, build-windows, create-homebrew-formula ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy binary artifacts
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done
          # Copy Homebrew formula
          cp artifacts/homebrew-formula/dcert.rb release-assets/

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Installation

            ### Homebrew (macOS and Linux)
            
            Download the `dcert.rb` formula from this release and install:
            ```bash
            brew install ./dcert.rb
            ```
            
            Or install directly from the binary:
            ```bash
            # macOS (Intel)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dcert-x86_64-apple-darwin.tar.gz | tar xz
            chmod +x dcert && sudo mv dcert /usr/local/bin/
            
            # macOS (Apple Silicon)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dcert-aarch64-apple-darwin.tar.gz | tar xz
            chmod +x dcert && sudo mv dcert /usr/local/bin/
            
            # Linux (x86_64)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/dcert-x86_64-unknown-linux-gnu.tar.gz | tar xz
            chmod +x dcert && sudo mv dcert /usr/local/bin/
            ```

            ### Docker
            ```bash
            docker run --rm ghcr.io/${{ github.repository }}:${{ github.ref_name }} https://www.google.com
            ```

            ### Windows
            Download the appropriate `.zip` file for your architecture and extract the executable.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [ test ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
