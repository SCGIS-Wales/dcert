name: CI

on:
  push:
    branches: ["**"]
  pull_request:

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt-and-clippy:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: rustfmt check
        run: cargo fmt --all -- --check

      - name: clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: fmt-and-clippy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Update Cargo.lock
        run: cargo generate-lockfile

      - name: Run tests
        run: cargo test --all --locked -- --nocapture

  build-linux:
    name: Build Linux binaries
    runs-on: ubuntu-latest
    needs: test
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable) with target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up dependencies (musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build (release)
        run: |
          set -euo pipefail
          if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
            export RUSTFLAGS="-C target-feature=+crt-static"
          fi
          cargo build --release --locked --target "${{ matrix.target }}"

      - name: Package tarball
        run: |
          set -euo pipefail
          BIN="dcert"
          TGT="${{ matrix.target }}"
          OUTDIR="release"
          mkdir -p "${OUTDIR}"

          SRC="target/${TGT}/release/${BIN}"
          cp "${SRC}" "${OUTDIR}/${BIN}-${TGT}"

          tar -C "${OUTDIR}" -czf "dcert-${TGT}.tar.gz" "${BIN}-${TGT}"

          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "dcert-${TGT}.tar.gz" > "dcert-${TGT}.sha256"
          else
            shasum -a 256 "dcert-${TGT}.tar.gz" > "dcert-${TGT}.sha256"
          fi

      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: dcert-${{ matrix.target }}-tarball
          path: |
            dcert-${{ matrix.target }}.tar.gz
            dcert-${{ matrix.target }}.sha256
